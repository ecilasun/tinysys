/** \file
 * Julia set example
 *
 * \ingroup examples
 * This example demonstrates the use of the VPU frame buffers to render a Julia set.
 */

#include <inttypes.h>
#include <stdio.h>
#include <string.h>
#include <memory.h>
#include <math.h>
#include <cmath>

#include "basesystem.h"
#include "core.h"
#include "vpu.h"

// Adapted from @sylefeb's julia sample

#define FP     6
#define IP     (FP+3)
#define CUTOFF (4<<FP)
unsigned short sq[] = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,3,3,4,4,5,5,6,6,7,8,9,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,26,27,28,30,31,33,34,36,37,39,40,42,43,45,47,49,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,81,83,85,87,90,92,95,97,100,102,105,107,110,112,115,118,121,123,126,129,132,135,138,141,144,147,150,153,156,159,162,165,169,172,175,178,182,185,189,192,196,199,203,206,210,213,217,221,225,228,232,236,240,244,248,252,256,260,264,268,272,276,280,284,289,293,297,301,306,310,315,319,324,328,333,337,342,346,351,356,361,365,370,375,380,385,390,395,400,405,410,415,420,425,430,435,441,446,451,456,462,467,473,478,484,489,495,500,506,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,506,500,495,489,484,478,473,467,462,456,451,446,441,435,430,425,420,415,410,405,400,395,390,385,380,375,370,365,361,356,351,346,342,337,333,328,324,319,315,310,306,301,297,293,289,284,280,276,272,268,264,260,256,252,248,244,240,236,232,228,225,221,217,213,210,206,203,199,196,192,189,185,182,178,175,172,169,165,162,159,156,153,150,147,144,141,138,135,132,129,126,123,121,118,115,112,110,107,105,102,100,97,95,92,90,87,85,83,81,78,76,74,72,70,68,66,64,62,60,58,56,54,52,50,49,47,45,43,42,40,39,37,36,34,33,31,30,28,27,26,25,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,9,8,7,6,6,5,5,4,4,3,3,2,2,1,1,1,1,0,0,0,0,0,0,0,0};
#define MASK   ((1<<(IP+1))-1)
#define CLAMP  ((1<<(IP-1))-1)
#define NEG    ((1<<(IP+1))  )

#define XCmin  -90
#define XCmax  (XCmin+40)
#define YCmin  10
#define YCmax  (YCmin+40)

int x_c = (XCmin+XCmax)>>1;
int x_c_i = 1;
int y_c = (YCmin+YCmax)>>1;
int y_c_i = 3;

static uint8_t *s_framebufferA;
static uint8_t *s_framebufferB;

int tilex = 0;
int tiley = 0;

void juliaTile(uint8_t* pixels)
{
	for (int y = 0; y < 16; ++y)
	{
		int row = y + tiley*16;
		for (int x = 0; x < 16; ++x)
		{
			int col = x + tilex*16;

			int x_f  = col-160;
			int y_f  = row-120;
			int clr=0;
			int clr8=32;
			for ( ; clr<24 ; clr++,clr8+=8) {
				int a_f = x_f & MASK;
				int b_f = y_f & MASK;
				int u_f = sq[a_f];
				int v_f = sq[b_f];
				int c_f = (x_f+y_f) & MASK;
				int s_f = sq[c_f];
				int w_f = s_f - u_f - v_f;
				x_f     = u_f - v_f + x_c;
				y_f     = w_f       + y_c;
				if (u_f + v_f > CUTOFF)
					break;
			}

			pixels[col + (row*320)] = clr8;
		}
	}
}

int main()
{
	s_framebufferB = VPUAllocateBuffer(320*240); // Or think of it as 1280*64 for tiles
	s_framebufferA = VPUAllocateBuffer(320*240);

	struct EVideoContext vx;
	vx.m_vmode = EVM_320_Wide;
	vx.m_cmode = ECM_8bit_Indexed;
	VPUSetVMode(&vx, EVS_Enable);
	VPUSetDefaultPalette(&vx);

	struct EVideoSwapContext sc;
	sc.cycle = 0;
	sc.framebufferA = s_framebufferA;
	sc.framebufferB = s_framebufferB;
	VPUSwapPages(&vx, &sc);

	// Grayscale palette
	for (uint32_t i=0; i<256; ++i)
	{
		int j = (255-i)>>4;
		VPUSetPal(i, j, j, j);
	}

	printf("Julia test\n");

	while(1)
	{
		juliaTile(sc.writepage);

		tilex++;
		if (tilex == 20)
		{
			tilex = 0;
			tiley++;
		}
		if (tiley == 15)
		{
			tiley = 0;

			CFLUSH_D_L1();
			VPUWaitVSync();
			VPUSwapPages(&vx, &sc);

			x_c += x_c_i;
			if (x_c < XCmin || x_c > XCmax) { x_c_i = - x_c_i; }
			y_c += y_c_i;
			if (y_c < YCmin || y_c > YCmax) { y_c_i = - y_c_i; }
		}
	}

	return 0;
}
