import glob
import os
import platform
from waflib.TaskGen import extension, feature, task_gen
from waflib.Task import Task
from waflib import Build
from shutil import copyfile

VERSION = '0.1'
APPNAME = 'tinysys'

top = '.'


def options(opt):
    # Prefers msvc, but could also use conf.load('clang++') instead
    if ('COMSPEC' in os.environ):
        opt.load('msvc')
    else:
        opt.load('clang++')

def configure(conf):
    # Prefers msvc, but could also use conf.load('clang++') instead
    if ('COMSPEC' in os.environ):
        conf.env.MSVC_TARGETS = ['x64']
        conf.load('msvc')
        conf.env.PLATFORM = ['windows']
    else:
        conf.load('clang++')
        conf.load('clang')

def build(bld):

    bld.post_mode = Build.POST_LAZY

	# NOTE: Define 'GALLIFREY' to enable two HARTs and bus acquire/release mechanism
    # NOTE: Define 'CPU_STATS' to enable CPU statistics
	# NOTE: Define 'GDB_COMM_DEBUG' to enable GDB stub debug / diagnosis messages

    # RELEASE
    if platform.system().lower().startswith('win'):
        libs = ['ws2_32', 'shell32', 'user32', 'Comdlg32', 'gdi32', 'ole32', 'kernel32', 'winmm', 'SDL2main', 'SDL2', 'SDL2_ttf']
        platform_defines = ['_CRT_SECURE_NO_WARNINGS', 'CAT_WINDOWS', 'RELEASE']
        includes = ['source', 'includes', '3rdparty/SDL2/include', '3rdparty/SDL2_ttf/include', '../3rdparty/fat32']
        sdk_lib_path = [os.path.abspath('3rdparty/SDL2/lib/x64/'), os.path.abspath('3rdparty/SDL2_ttf/lib/x64/')]
        compile_flags =  ['/permissive-', '/arch:AVX2', '/GL', '/WX', '/O2', '/fp:fast', '/Qfast_transcendentals', '/Zi', '/EHsc', '/FS', '/DRELEASE', '/D_SECURE_SCL 0']
        platform_flags = ['/std:c++20']
        linker_flags = ['/SUBSYSTEM:CONSOLE', '/LTCG', '/RELEASE']
        APPNAME = 'tinysys'
    elif platform.system().lower().startswith('darwin'):
        libs = ['SDL2', 'SDL2_ttf']
        platform_defines = ['_CRT_SECURE_NO_WARNINGS', 'CAT_DARWIN', 'RELEASE', 'GALLIFREY']
        includes = ['source', 'includes', '/opt/homebrew/Cellar/sdl2/2.30.5/include/SDL2', '/opt/homebrew/Cellar/sdl2_ttf/2.22.0/include/SDL2', '../3rdparty/fat32']
        sdk_lib_path = ['/opt/homebrew/Cellar/sdl2/2.30.5/lib/', '/opt/homebrew/Cellar/sdl2_ttf/2.22.0/lib/']
        compile_flags = ['-march=native', '-O3', '-arch', 'arm64']
        platform_flags = ['-std=c++20']
        linker_flags = []
        APPNAME = 'mactinysys'
    elif platform.system().lower().startswith('linux'):
        libs = ['SDL2', 'SDL2_ttf']
        platform_defines = ['_CRT_SECURE_NO_WARNINGS', 'CAT_LINUX', 'RELEASE', 'GALLIFREY']
        includes = ['source', 'includes', '/usr/include/SDL2', '../3rdparty/fat32']
        sdk_lib_path = ['/usr/lib/x86_64-linux-gnu/libSDL2']
        compile_flags = ['-march=native', '-O3', '-fno-omit-frame-pointer', '-fno-common', '-fno-exceptions', '-fno-rtti']
        platform_flags = ['-std=c++20']
        linker_flags = []
        APPNAME = 'tinysys'

    # build 3rdparty fat32 code
    bld.stlib(
        source = glob.glob('../3rdparty/fat32/*.c'),
        cxxflags = compile_flags + ['-std=c99'],
        ldflags = linker_flags,
        target = 'fat32',
        defines = platform_defines,
        includes = includes,
        use = [])

    # build sdcard code
    bld.stlib(
        source = glob.glob('*.c'),
        cxxflags = compile_flags + ['-std=c99'],
        ldflags = linker_flags,
        target = 'sdcard',
        defines = platform_defines,
        includes = includes,
        use = [])

    # Build risctool
    bld.program(
        source=glob.glob('*.cpp'),
        cxxflags=compile_flags + platform_flags,
        ldflags=linker_flags,
        target=APPNAME,
        defines=platform_defines,
        includes=includes,
        libpath=sdk_lib_path,
        lib=libs,
        use=['sdcard', 'fat32'])

    if platform.system().lower().startswith('win'):
        bld(features='subst', source=glob.glob('3rdparty/SDL2/lib/x64/SDL2.dll'), target=os.path.abspath('bin/SDL2.dll'), is_copy=True)
        bld(features='subst', source=glob.glob('3rdparty/SDL2_ttf/lib/x64/SDL2_ttf.dll'), target=os.path.abspath('bin/SDL2_ttf.dll'), is_copy=True)
        bld(features='subst', source='tinysys.exe', target=os.path.abspath('bin/tinysys.exe'), is_copy=True)
    elif platform.system().lower().startswith('darwin'):
        # bld(features='subst', source=glob.glob('/opt/homebrew/Cellar/sdl2/2.30.5/lib/libSDL2.dylib'), target=os.path.abspath('bin/libSDL2.dylib'), is_copy=True)
        # bld(features='subst', source=glob.glob('/opt/homebrew/Cellar/sdl2_ttf/2.22.0/lib/libSDL2_ttf.dylib'), target=os.path.abspath('bin/libSDL2_ttf.dylib'), is_copy=True)
        bld(features='subst', source='mactinysys', target=os.path.abspath('bin/mactinysys'), is_copy=True)
        bld(rule='chmod +x ' + os.path.abspath('bin/mactinysys'), always=True)
    else:
        # bld(features='subst', source=glob.glob('/opt/homebrew/Cellar/sdl2/2.30.5/lib/libSDL2.dylib'), target=os.path.abspath('bin/libSDL2.dylib'), is_copy=True)
        # bld(features='subst', source=glob.glob('/opt/homebrew/Cellar/sdl2_ttf/2.22.0/lib/libSDL2_ttf.dylib'), target=os.path.abspath('bin/libSDL2_ttf.dylib'), is_copy=True)
        bld(features='subst', source='tinysys', target=os.path.abspath('bin/tinysys'), is_copy=True)
        bld(rule='chmod +x ' + os.path.abspath('bin/tinysys'), always=True)
